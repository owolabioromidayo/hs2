import requests, sys, joblib, datetime, threading, json

from pymongo import MongoClient

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from bson.binary import Binary
from sklearn import tree
import matplotlib.pyplot as plt
import pandas as pd


def train():
    #replace these with your values from env
    DB_NAME = redacted  
    CONNECTION_STRING = redacted  #os.environ.get("MONGO_CONNECTION_STRING", None)

    print("Started Training")
    MODEL_FILE = "/tmp/model.pkl"
    IMAGE_FILE="/tmp/dtree.png"


    #connect to mongodb
    client = MongoClient(CONNECTION_STRING)
    collection = client[DB_NAME]['weather_data']

    print("Connected")

    cursor = collection.find()
    df = pd.DataFrame(list(cursor))

    y = df["label"]
    X = df[['baro_pressure', 'ext_temp', 'humidity', 'wind_speed', 'uv']]
  
    #train with sklearn
    print("Training")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
    dtree_model = DecisionTreeClassifier().fit(X_train, y_train)
    
    print("Trained")
    dtree_predictions = dtree_model.predict(X_test)
    cm = confusion_matrix(y_test, dtree_predictions)
    score = dtree_model.score(X_test, y_test) #get model accuracy
    
    print("Attempting Save")
    joblib.dump(dtree_model, MODEL_FILE) #create model file
    
    print("Saved")
    #create image
    class_names = [
        "Thunderstorm with light rain",
        "Thunderstorm with rain",
        "Thunderstorm with heavy rain",
        "Thunderstorm with light drizzle",
        "Thunderstorm with drizzle",
        "Thunderstorm with heavy drizzle",
        "Thunderstorm with Hail",
        "Light Drizzle",
        "Drizzle",
        "Heavy Drizzle",
        "Light Rain",
        "Moderate Rain",
        "Heavy Rain",
        "Freezing rain",
        "Light shower rain",
        "Shower rain",
        "Heavy shower rain",
        "Light snow",
        "Snow",
        "Heavy Snow",
        "Mix snow/rain",
        "Sleet",
        "Heavy sleet",
        "Snow shower",
        "Heavy snow shower",
        "Flurries",
        "Mist",
        "Smoke",
        "Haze",
        "Sand/dust",
        "Fog",
        "Freezing Fog",
        "Clear sky",
        "Few clouds",
        "Scattered clouds",
        "Broken clouds",
        "Overcast clouds",
        "Unknown Precipitation"
    ]

    fig = plt.figure(figsize=(100,100))
    _ = tree.plot_tree(dtree_model, 
                    feature_names=['baro_pressure', 'ext_temp', 'humidity', 'wind_speed', 'wind_direction'],  
                    class_names=class_names,
                    filled=True)
                    
    print("Attempting image save")            
    
    with open(IMAGE_FILE, 'w+') as _:
                pass #create file

    fig.savefig(IMAGE_FILE)

    print("image saved")            
    #save to mongodb
    ml_collection = client[DB_NAME]["ml"]

    with open(MODEL_FILE, "rb") as f:
        model_bin = Binary(f.read())

    with open(IMAGE_FILE, "rb") as f:
        image_bin = Binary(f.read())

    dt = datetime.datetime.now()
    ml_collection.insert_one({
        "file": model_bin, 
        "image-png": image_bin,
        "description": f"Dtree Model Snapshot at {dt}", 
        "accuracy": score,
        "confusion_matrix": str(cm),
        "datetime": dt,
        "n_samples_used" : len(df)
        })

    print("Done")

def handler(event, context):
    TRAINING_PASSWORD=redacted
   
    password = None
    try: 
        password = eval(str(event))['password']
    except Exception as e:
        try:
            #second method
            print("Trying second method")
            password = eval(event.get('body'))['password']
        except:
            #No password
            return {
            'statusCode': 400,
            'body': "Incomplete Request"
            }
        

        print(f"Got password, {password}")
        if password == TRAINING_PASSWORD:
            train()
            return {
                'statusCode': 200,
                'body': json.dumps("Training Model!")
            }
          
        return {
            'statusCode': 401,
            'body': "Invalid Password", 
        }
