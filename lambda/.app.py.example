import requests, sys, joblib, datetime, threading, json

from pymongo import MongoClient

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from bson.binary import Binary
from sklearn import tree
import matplotlib.pyplot as plt
import pandas as pd


def train():
    #replace these with your values from env
    DB_NAME = "put your MONGO_DB_NAME here" 
    CONNECTION_STRING ="put your mongo connection string here"

    print("Started Training")
    MODEL_FILE = "/tmp/model.pkl"

    #connect to mongodb
    client = MongoClient(CONNECTION_STRING)
    collection = client[DB_NAME]['weather_data']

    print("Connected")

    cursor = collection.find()
    df = pd.DataFrame(list(cursor))

    y = df["label"]
    X = df[['baro_pressure', 'ext_temp', 'humidity', 'wind_speed', 'uv', 'precipitation_mmhr']]
  
    #train with sklearn
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
    dtree_model = DecisionTreeClassifier().fit(X_train, y_train)
    
    dtree_predictions = dtree_model.predict(X_test)
    cm = confusion_matrix(y_test, dtree_predictions)
    score = dtree_model.score(X_test, y_test) #get model accuracy
    
    joblib.dump(dtree_model, MODEL_FILE) #save model to file
    
    #save to mongodb
    ml_collection = client[DB_NAME]["ml"]

    with open(MODEL_FILE, "rb") as f:
        model_bin = Binary(f.read())

    dt = datetime.datetime.now()
    ml_collection.insert_one({
        "file": model_bin, 
        "description": f"Dtree Model Snapshot at {dt}", 
        "accuracy": score,
        "confusion_matrix": str(cm),
        "datetime": dt,
        "n_samples_used" : len(df)
        })

    print("Done")

def handler(event, context):
    TRAINING_PASSWORD="put yours here"

    password = None
    try:
        print("Trying to parse password")
        password = eval(event.get('body'))['password']
    except:
        return {
        'statusCode': 400,
        'body': "Incomplete Request"
        }

    print(f"Got password, {password}")
    if password == TRAINING_PASSWORD:
        train()
        return {
            'statusCode': 200,
            'body': "Model Trained!"
        }
        
    return {
        'statusCode': 401,
        'body': "Invalid Password", 
    }
